- degree: Computer Science, M.Sc. RWTH
  university: RWTH Aachen University
  year: 2019 - 2023
  tags:
    - Computer Security
    - Cryptography and Network Security
    - Security Lab
    - Object-oriented Software Construction
    - Software Project Management
    - Advanced Internet Technology
    - Functional Programming
    - Automata Theory & Formal Languages
    - Computability & Complexity Theory
    - Mathematical Logic
    - Compiler Construction
    - Operations Research
  description: |
    After laying the foundations in my bachelor studies, I wanted to deepen my knowledge in software engineering and also specialize in software security.
    Before that, in my first semesters, I had to catch up on some theoretical computer science courses.
    This was due to the strong focus on theoretical computer science at RWTH Aachen, and therefore required for graduates of the computer science master program.
    And I have to say, these courses are quite something.
    While you start off with a bit of automata theory, you soon arrive at basic but important concepts of theoretical computer science.
    From Turing machines, busy beavers, P's and NP's to predicate logic and Ehrenfeucht-Fraïssé games, there is something for everyone.
    And proofs. A lot of proofs..
    Nevertheless, I had a lot fun and I'm glad to learn (or tried to at least) these interesting problems and solutions.
    At this point, I also questioned myself whether a career path in the theoretical branch would be more appealing to me.
    However, I decided that I'm just too facsinated with code, software development and security to let that behind me.

    Later on, I visited as much courses from the security and software construction institues of RWTH as I could, and they were all great.
    The security courses provided a broad view of many distinct topics in this area, but also in-depth explanations into cryptographic algorithms and alike.
    Furthermore, we discussed many things from security protocols, cryptography, malware and social engineering.
    I'm glad that I could also participate in their Security Lab, a practical seminar in which we hack, attack, and solve cryptographic puzzles.
    In order to participate, we had to solve an entry task with many tricky, but fun challenges.
    Some of us also wrote a seminar paper about a current security research topic.
    I presented [how passwords managers can benefit from honey encryption](assets/files/seminar-paper.pdf).
    
    In the software engineering area, the most interesting ones were about object-oriented software construction and project management.
    We covered design foundations and how to use domain modeling & DDD to design software systems, advanced software patterns, REST, and bad smells.
    In software project management, we discussed different software development process models, scheduling and effort estimation as well as risk management.
    We had many tasks to practice these skills in small scoped projects.

    In the end of my master study program, of course, I worked on a research project for my master thesis.
    With guidance of a great mentor, I wanted to draw a clearer picture on how security is modeled during software architecture design and which methods and design concepts are used for that.
    I performed a Systematic Literature Review to gather and classify security design concepts used in software architecture modeling, and specifically for microservice architectures.
    From these findings, I compiled a catalog of security mechanisms and a metamodel to reason about security from a software engineering perspective.
    The results were discussed with industry and research experts.
    Thus, I provided a foundation for upcoming research projects and theses to further shed light on the security of software systems.

    *Master thesis*: [Towards a software engineering view of security for microservice-based applications](https://swc.rwth-aachen.de/theses/towards-a-software-engineering-view-of-security-for-microservice-based-applications/)

    *Final grade*: 1.1 (with honors)

- degree: Scientific Programming, B.Sc. (dual study)
  university: FH Aachen - Univserity of Applied Sciences
  year: 2016 - 2019
  tags:
    - Analysis
    - Linear Algebra
    - Numerical Analysis
    - Programming (Java)
    - C++
    - Algorithms & Data Structures
    - Databases
    - Software Engineering
    - Component-based Software Development
    - Android
    - Data Science
    - Data Analysis
  description: |
    In my bachelor studies, I learned the mathematical and computer science foundations for my career.
    The first semesters covered the basic courses that most undergraduate students face in the beginnings of their study.
    Nonetheless, this study program had a deeper dive into the maths behind scientific computing.
    In the second half of this study program, we had more freedom to choose those courses that match our interests best.
    For me, the most interesting courses were Algorithms & Data Structures as well as Software Engineering.
    These courses perfectly showcased what we can achieve with code in a large scale.
    This is where I also settled my path to focus on the software engineering route.

    In my bachelor thesis, I implemented a code generator of [MontiArcs](https://www.se-rwth.de/research/Software-Architecture/) time-synchronous process model with distributed components.
    Thus, it is possible to define component & connector architectures with this language and generate code executable on different devices that communicate via TCP sockets.

    *Bachelor thesis*: Generating Time-Synchronous, Distributed Component & Connector Architectures

    *Final grade*: 1.5
    

- degree: Mathematical-technical Software Developer (MATSE)
  university: Chair of Software Engineering, RWTH Aachen University
  year: 2016 - 2019
  tags:
    - MontiCore
    - Model-driven Development
    - Java
    - Code Generation
    - GitLab
    - Docker
    - DSLs
    - UML
  description: |
    During my bachelor studies, I also completed an apprenticeship as a MATSE.
    The apprenticeship was part of the dual study mentioned above.
    From my perspective, this combination of theoretical knowledge from the study program and practical hands-on experience from the apprenticeship is just perfect.
    Furthermore, I feel lucky to work at a university chair focusing on practical software engineering research problems.
    I had the opportunity to contribute to the [MontiCore](https://monticore.github.io/monticore/) research project.
    The project establishes a tool and a framework to develop domain-specific languages (DLSs), generate and adapt code from these languages.
    I supported the development of their core grammars and languages as well as the core code generation engine.
    For instance, I spent whole lot of time working on a language called "JavaDSL" which implements Java language specification.
    Using MontiCore and JavaDSL, it is possible to embed Java code into other DSLs created by MontiCore.
